import random
import logging
import json
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)

import os
BOT_TOKEN = "8007679799:AAGekKeFh9L9oWLI35ieOM3ENjCxCKofJow"
ADMIN_CHAT_ID = "-4618714192"  # Chat ID where you want logs
PARTICIPANT_FILE = "participan.json"  # Stores unique participant numbers

# === UTILS ===
def load_participants():
    try:
        with open(PARTICIPANT_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_participants(data):
    with open(PARTICIPANT_FILE, "w") as f:
        json.dump(data, f, indent=2)

def generate_unique_number(existing_ids):
    while True:
        number = f"P{random.randint(1000, 9999)}"
        if number not in existing_ids:
            return number

# === START COMMAND ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    participants_data = load_participants()

    if str(chat_id) in participants_data:
        await context.bot.send_message(chat_id=chat_id, text="–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
        return

    new_id = generate_unique_number([p["id"] for p in participants_data.values()])
    participants_data[str(chat_id)] = {
        "id": new_id,
        "joined_at": datetime.now().isoformat(),
        "task_done": False
    }
    save_participants(participants_data)

    await context.bot.send_message(chat_id=chat_id, text=f"–ü—Ä–∏–≤—ñ—Ç! –í–∞—à –∞–Ω–æ–Ω—ñ–º–Ω–∏–π –Ω–æ–º–µ—Ä —É—á–∞—Å–Ω–∏–∫–∞: {new_id}")
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚úÖ –£—á–∞—Å–Ω–∏–∫ {new_id} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è.")

    context.job_queue.run_once(send_test_message, when=5, chat_id=chat_id)
    context.job_queue.run_once(ask_if_done, when=20, chat_id=chat_id)

async def send_test_message(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    await context.bot.send_message(chat_id=chat_id, text="""\
–í—ñ—Ç–∞—é! –î—è–∫—É—é –∑–∞ —É—á–∞—Å—Ç—å —É —Ü—å–æ–º—É –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—ñ!

–ù–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –í–∏ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–∞ —Ç–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–µ—Ä—à –Ω—ñ–∂ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ —Å–∞–º–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.

–£ —Ü—å–æ–º—É –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—ñ –í–∞–º –±—É–¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Å–∞—Ç–∏ –Ω–∞ –æ–¥–Ω—É —ñ–∑ –∑–∞–¥–∞–Ω–∏—Ö —Ç–µ–º 15 —Ö–≤–∏–ª–∏–Ω —Ç–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –¥–æ —ñ –ø—ñ—Å–ª—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É. –£—Å—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏–º–∏, –∞ –í–∞—à—ñ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—à–µ –í–∞–º.

–ü–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–≤–¥–∞–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞:
‚Ä¢ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ü–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (https://docs.google.com/forms/d/e/1FAIpQLSdqW48eEaLW27ax2iQ-NfXQ2VT1Uw-7cNlPzVeqEfH5Lgcetg/viewform?usp=header)
‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ —Ü—è —Ç–µ—Ö–Ω—ñ–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ—Å–∏—Ç—å –µ–º–æ—Ü—ñ–π–Ω–æ—é, —ñ –¥–µ—è–∫—ñ –ª—é–¥–∏ –ø–ª–∞–∫–∞–ª–∏ –ø—ñ–¥ —á–∞—Å —ó—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
‚Ä¢ –ö—Ä–∞—â–µ –º–∞—Ç–∏ —Ü—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø—ñ–¥ —Ä—É–∫–æ—é –ø—ñ–¥ —á–∞—Å –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É.

–í–ê–ñ–õ–ò–í–û: –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –æ–±–≥–æ–≤–æ—Ä—é–π—Ç–µ –Ω—ñ –∑ –∫–∏–º –ø–∏—Å—å–º–æ–≤—É —Ç–µ—Ö–Ω—ñ–∫—É —Ç–∞ –¥–µ—Ç–∞–ª—ñ —Å–≤–æ—ó—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π.
""")

async def ask_if_done(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    await context.bot.send_message(chat_id=chat_id, text="–ß–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ –≤–∏ –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è? (–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ: —Ç–∞–∫ / –Ω—ñ)")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    chat_id = update.effective_chat.id
    participants_data = load_participants()
    user = participants_data.get(str(chat_id), None)

    if not user:
        return

    if "—Ç–∞–∫" in text:
        user["task_done"] = True
        await context.bot.send_message(chat_id=chat_id, text="–ß—É–¥–æ–≤–æ! –û—á—ñ–∫—É–π—Ç–µ —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚úÖ –£—á–∞—Å–Ω–∏–∫ {user['id']} –≤–∏–∫–æ–Ω–∞–≤ –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        save_participants(participants_data)

    elif "–Ω—ñ" in text:
        await context.bot.send_message(chat_id=chat_id, text="–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥—É–≥–ª —Ñ–æ—Ä–º–∏ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —ó—ó.")
        context.job_queue.run_once(ask_if_done, when=40, chat_id=chat_id)

async def assign(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /assign P1234 —Ç–µ–∫—Å—Ç_–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return

    participant_id = args[0]
    message_text = " ".join(args[1:])
    participants_data = load_participants()

    for chat_id, data in participants_data.items():
        if data["id"] == participant_id:
            await context.bot.send_message(chat_id=int(chat_id), text=message_text)
            await update.message.reply_text(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ {participant_id}")
            return

    await update.message.reply_text("‚ùå –£—á–∞—Å–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")

async def clear_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    participants_data = load_participants()

    if str(chat_id) in participants_data:
        del participants_data[str(chat_id)]
        save_participants(participants_data)
        await update.message.reply_text("‚úÖ –í–∏ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
    else:
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É —Å–∏—Å—Ç–µ–º—ñ.")

def main():
    app = ApplicationBuilder().token("8007679799:AAGekKeFh9L9oWLI35ieOM3ENjCxCKofJow").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("assign", assign))
    app.add_handler(CommandHandler("clearme", clear_me))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
